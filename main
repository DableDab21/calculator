import sys
from PyQt6.QtWidgets import QApplication, QWidget, QPushButton, QGridLayout, QVBoxLayout, QLabel

class MyWindow(QWidget):
    def __init__(self):
        super().__init__()

        # Настройка окна
        self.setWindowTitle('Калькулятор')
        self.setGeometry(100, 100, 400, 250)  # Установите размер и положение окна

        # Создание дисплея
        self.display = QLabel('0')
        self.display.setStyleSheet('QLabel { background-color: white; border: 2px solid #4CAF50; padding: 10px; font-size: 24px; }')

        # Создание кнопок с названиями от 1 до 9, 0, +, -, *, /, и других
        button_labels = [
            '7', '8', '9', '/',
            '4', '5', '6', '*',
            '1', '2', '3', '-',
            '0', '.', '=', '+',
            '<-', 'C'
        ]
        self.buttons = [QPushButton(label) for label in button_labels]

        # Флаг для отслеживания наличия арифметического знака
        self.has_operator = False

        # Назначение действия (в данном случае, просто вывод названия кнопки)
        for button in self.buttons:
            button.clicked.connect(self.on_button_click)
            button.setStyleSheet('QPushButton { font-size: 18px; }')

        # Расположение элементов с использованием вертикального лейаута
        layout = QVBoxLayout(self)
        layout.addWidget(self.display)  # Добавление дисплея

        # Добавление кнопок в сетку
        grid_layout = QGridLayout()
        grid_layout.addWidget(self.buttons[0], 0, 0, 1, 1)  # 7
        grid_layout.addWidget(self.buttons[1], 0, 1, 1, 1)  # 8
        grid_layout.addWidget(self.buttons[2], 0, 2, 1, 1)  # 9
        grid_layout.addWidget(self.buttons[3], 0, 3, 1, 1)  # /
        grid_layout.addWidget(self.buttons[4], 1, 0, 1, 1)  # 4
        grid_layout.addWidget(self.buttons[5], 1, 1, 1, 1)  # 5
        grid_layout.addWidget(self.buttons[6], 1, 2, 1, 1)  # 6
        grid_layout.addWidget(self.buttons[7], 1, 3, 1, 1)  # *
        grid_layout.addWidget(self.buttons[8], 2, 0, 1, 1)  # 1
        grid_layout.addWidget(self.buttons[9], 2, 1, 1, 1)  # 2
        grid_layout.addWidget(self.buttons[10], 2, 2, 1, 1)  # 3
        grid_layout.addWidget(self.buttons[11], 2, 3, 1, 1)  # -
        grid_layout.addWidget(self.buttons[12], 3, 0, 1, 1)  # 0
        grid_layout.addWidget(self.buttons[13], 3, 1, 1, 1)  # .
        grid_layout.addWidget(self.buttons[14], 3, 2, 1, 1)  # =
        grid_layout.addWidget(self.buttons[15], 3, 3, 1, 1)  # +
        grid_layout.addWidget(self.buttons[16], 4, 0, 1, 2)  # <-
        grid_layout.addWidget(self.buttons[17], 4, 2, 1, 2)  # C

        layout.addLayout(grid_layout)  # Добавление сетки с кнопками

    def on_button_click(self):
        # Получаем и выводим текст кнопки, на которую нажали
        sender_button = self.sender()
        button_text = sender_button.text()

        # Обработка арифметических операций
        if button_text in ('+', '-', '*', '/'):
            if not self.has_operator:
                current_text = self.display.text()
                self.display.setText(current_text + button_text)
                self.has_operator = True
        elif button_text == "=":
            try:
                result = eval(self.display.text())
                self.display.setText(str(result))
                self.has_operator = False
            except Exception as e:
                self.display.setText('Error')
        elif button_text == "<-":
            current_text = self.display.text()
            if len(current_text) > 1:
                self.display.setText(current_text[:-1])
            else:
                self.display.setText('0')
        elif button_text == "C":
            self.display.setText('0')
            self.has_operator = False
        else:
            # Обновляем текст дисплея, удаляя первый ноль, если он там есть
            current_text = self.display.text()
            if current_text == '0':
                self.display.setText(button_text)
            else:
                self.display.setText(current_text + button_text)

            # Сброс флага арифметического знака
            self.has_operator = False

if __name__ == '__main__':
    app = QApplication(sys.argv)

    # Создайте экземпляр класса окна
    window = MyWindow()

    # Отобразите окно
    window.show()

    # Запустите цикл обработки событий
    sys.exit(app.exec())
